//@version=6
indicator(title="Money Flow Index,, Bollinger Bands", shorttitle="MFI BB", format=format.price, precision=2, timeframe="", timeframe_gaps=true)

// MFI Settings
mfiLengthInput = input.int(14, minval=1, title="MFI Length", group="MFI Settings")
// MFI는 일반적으로 hlc3으로 계산
mfiSource = hlc3
calculateDivergence = input.bool(false, title="Calculate Divergence", group="MFI Settings", display=display.data_window, tooltip="Calculating divergences is needed in order for divergence alerts to fire.")

// MFI Calculation (내장함수 사용)
mfiValue = ta.mfi(mfiSource, mfiLengthInput)


// Smoothing MA inputs
GRP = "Smoothing"
TT_BB = "Only applies when 'SMA + Bollinger Bands' is selected. Determines the distance between the SMA and the bands."
maTypeInput   = input.string("SMA", "Type", options=["None", "SMA", "SMA + Bollinger Bands", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group=GRP, display=display.data_window)
maLengthInput = input.int(14, "Length", group=GRP, display=display.data_window)
bbMultInput   = input.float(2.0, "BB StdDev", minval=0.001, maxval=50, step=0.5, tooltip=TT_BB, group=GRP, display=display.data_window)
var enableMA = maTypeInput != "None"
var isBB     = maTypeInput == "SMA + Bollinger Bands"

// Smoothing MA Calculation 함수
ma(source, length, MAtype) =>
	switch MAtype
		"SMA"                   => ta.sma(source, length)
		"SMA + Bollinger Bands" => ta.sma(source, length)
		"EMA"                   => ta.ema(source, length)
		"SMMA (RMA)"            => ta.rma(source, length)
		"WMA"                   => ta.wma(source, length)
		"VWMA"                  => ta.vwma(source, length)

smoothingMA   = enableMA ? ma(mfiValue, maLengthInput, maTypeInput) : na
smoothingStDev = isBB ? ta.stdev(mfiValue, maLengthInput) * bbMultInput : na

plot(smoothingMA, "MFI-based MA", color=color.yellow, display=enableMA ? display.all : display.none, editable=enableMA)
bbUpperBand = plot(smoothingMA + smoothingStDev, title="Upper Bollinger Band", color=color.rgb(255, 255, 255), display=isBB ? display.all : display.none, editable=isBB)
bbLowerBand = plot(smoothingMA - smoothingStDev, title="Lower Bollinger Band", color=color.rgb(255, 255, 255), display=display.none, editable=isBB)
fill(bbUpperBand, bbLowerBand, color=isBB ? color.new(color.green, 90) : na, title="Bollinger Bands Background Fill", display=display.none, editable=isBB)

// MFI Plot & Bands
mfiPlot      = plot(mfiValue, "MFI", color=#7E57C2)
mfiUpperBand = hline(75, "MFI Upper Band", color=#787B86)
// midline      = hline(50, "MFI Middle Band", color=color.new(#787B86, 50))
mfiLowerBand = hline(25, "MFI Lower Band", color=#787B86)
// fill(mfiUpperBand, mfiLowerBand, color=color.rgb(126, 87, 194, 90), title="MFI Background Fill")
// midLinePlot  = plot(50, color=na, editable=false, display=display.none)
// fill(mfiPlot, midLinePlot, 100, 80, top_color=color.new(color.green, 0), bottom_color=color.new(color.green, 100), title="Overbought Gradient Fill")
// fill(mfiPlot, midLinePlot, 20, 0, top_color=color.new(color.red, 100), bottom_color=color.new(color.red, 0), title="Oversold Gradient Fill")


// Divergence Detection 설정
lookbackRight = 5
lookbackLeft  = 5
rangeUpper    = 60
rangeLower    = 5
bearColor     = color.red
bullColor     = color.green
textColor     = color.white
noneColor     = color.new(color.white, 100)

_inRange(bool cond) =>
    bars = ta.barssince(cond)
    rangeLower <= bars and bars <= rangeUpper

plFound = false
phFound = false

bullCond = false
bearCond = false

mfiLBR = mfiValue[lookbackRight]

if calculateDivergence
    // --- Regular Bullish Divergence ---
    // MFI: Higher Low
    plFound := not na(ta.pivotlow(mfiValue, lookbackLeft, lookbackRight))
    mfiHL = mfiLBR > ta.valuewhen(plFound, mfiLBR, 1) and _inRange(plFound[1])
    // Price: Lower Low
    lowLBR = low[lookbackRight]
    priceLL = lowLBR < ta.valuewhen(plFound, lowLBR, 1)
    bullCond := priceLL and mfiHL and plFound

    // --- Regular Bearish Divergence ---
    // MFI: Lower High
    phFound := not na(ta.pivothigh(mfiValue, lookbackLeft, lookbackRight))
    mfiLH = mfiLBR < ta.valuewhen(phFound, mfiLBR, 1) and _inRange(phFound[1])
    // Price: Higher High
    highLBR = high[lookbackRight]
    priceHH = highLBR > ta.valuewhen(phFound, highLBR, 1)
    bearCond := priceHH and mfiLH and phFound

plot(
     plFound ? mfiLBR : na,
     offset=-lookbackRight,
     title="Regular Bullish",
     linewidth=2,
     color=(bullCond ? bullColor : noneColor),
     display=display.pane
     )

plotshape(
     bullCond ? mfiLBR : na,
     offset=-lookbackRight,
     title="Regular Bullish Label",
     text=" Bull ",
     style=shape.labelup,
     location=location.absolute,
     color=bullColor,
     textcolor=textColor,
     editable=calculateDivergence
     )

plot(
     phFound ? mfiLBR : na,
     offset=-lookbackRight,
     title="Regular Bearish",
     linewidth=2,
     color=(bearCond ? bearColor : noneColor),
     display=display.pane
     )

plotshape(
     bearCond ? mfiLBR : na,
     offset=-lookbackRight,
     title="Regular Bearish Label",
     text=" Bear ",
     style=shape.labeldown,
     location=location.absolute,
     color=bearColor,
     textcolor=textColor,
     editable=calculateDivergence
     )

alertcondition(bullCond, title="Regular Bullish Divergence", message="Found a new Regular Bullish Divergence, `Pivot Lookback Right` number of bars to the left of the current bar.")
alertcondition(bearCond, title="Regular Bearish Divergence", message="Found a new Regular Bearish Divergence, `Pivot Lookback Right` number of bars to the left of the current bar.")
